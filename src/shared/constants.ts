export const HTML_CSS_QUESTIONS = [
  {
    number: 1,
    title: `Что такое HTML и CSS? Для чего они используются?`,
    shortAnswer: '',
    longAnswer: `<strong>HTML —</strong> <span>это язык разметки, который используется для создания структуры веб-страницы.<br>
    Он определяет, какие элементы будут присутствовать на странице и как они структурированы.</span><br>
    
    <strong>CSS —</strong> <span>это язык таблиц стилей, который используется для оформления внешнего вида веб-страницы.<br>
    Он позволяет управлять стилем и расположением элементов на странице.</span><br><br>
    
    <strong>Как работают вместе:</strong><br>
    <span>HTML задает структуру, а CSS — стили и дизайн. Например, HTML создаст заголовок, а CSS задаст его цвет и выравнивание.<br>
    Пример совместного использования:</span>`,
    frequency: 4,
    language: "html",
    codeExample: `<!DOCTYPE html>
<html lang="ru">
<head>
  <title>Пример страницы</title>
  <style>
    h1 {
      color: blue;
      text-align: center;
    }
  </style>
</head>
<body>
  <h1>Привет, мир!</h1>
</body>
</html>`
  },
  {
    number: 2,
    title: `Cемантика HTML, и зачем ее использовать?`,
    shortAnswer: '',
    longAnswer: `<strong>Семантический HTML —</strong> <span>это использование HTML-тегов, которые ясно и точно описывают смысл
    их содержимого. В отличие от несемантических тегов, таких как <code>&lt;div&gt;</code> и <code>&lt;span&gt;</code>, семантические
    теги, например, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code>, имеют четкое назначение и облегчают
    понимание структуры веб-страницы.</span><br> <strong>Преимущества семантического HTML:</strong> <span><br><b>Улучшение доступности (Accessibility):</b><br>
    Семантические теги помогают скринридерам (программам для чтения с экрана) понимать структуру страницы, что особенно важно для пользователей с ограниченными возможностями. Например, <code>&lt;nav&gt;</code> обозначает навигационный блок, что позволяет скринридеру быстро перемещаться
    по странице.<br><b>SEO (поисковая оптимизация):</b>
    Поисковые системы, такие как Google, используют семантические теги для определения важности
    контента. Это помогает улучшить ранжирование сайта в поисковых системах.<br><b>Поддерживаемость и читаемость кода:</b>
    Семантический HTML делает код более понятным для других разработчиков. Например, <code>&lt;article&gt;</code> сразу
    подсказывает, что внутри находится самостоятельный блок контента.
    Улучшение пользовательского опыта:
    Семантические теги позволяют браузерам и другим устройствам, например, умным колонкам,
    интерпретировать и отображать контент наиболее подходящим образом.
    <br><b>Соответствие стандартам:</b>
    Использование семантических тегов способствует написанию валидного кода, который соответствует
    стандартам W3C.</span><br><br>`,
    frequency: 4,
    language: "html",
  },
  {
    number: 3,
    title: `Основные семантические теги и их назначение ?`,
    shortAnswer: '',
    longAnswer: `<strong><code>&lt;header&gt;</code></strong><span> Используется для создания шапки страницы или раздела.</span><br>
     <strong>Пример содержания:</strong><span> логотип, навигация, заголовок.</span><br><br>
     <strong><code>&lt;footer&gt;</code></strong><span> Определяет нижний колонтитул страницы или секции.</span><br>
     <strong>Пример содержания:</strong><span> контактная информация, копирайт, ссылки на политику конфиденциальности.</span><br><br>
     <strong><code>&lt;main&gt;</code></strong><span> Содержит основной контент страницы, уникальный для данной страницы.</span><br>
     <strong>Пример содержания:</strong><span> содержит только уникальный контент страницы (основной контент).</span><br><br>
     <strong><code>&lt;section&gt;</code></strong><span> Используется для группировки связанных по смыслу элементов. Обычно имеет заголовок.</span><br><br>
     <strong><code>&lt;article&gt;</code></strong><span> Определяет самостоятельный блок контента, например, статью, новость или пост.</span><br><br>
     <strong><code>&lt;aside&gt;</code></strong><span> Определяет дополнительный контент, связанный с основным, например, боковую панель,
     рекламу, ссылки.</span><br><br>
     <strong><code>&lt;nav&gt;</code></strong><span> Определяет навигационное меню или группу ссылок.</span><br><br>
     <strong><code>&lt;figure&gt;</code> и <code>&lt;figcaption&gt;</code></strong><span> Используются для добавления иллюстраций с подписью..</span><br><br>
     <strong><code>&lt;time&gt;</code></strong><span> Указывает дату или время в стандартизированном формате.</span><br><br>
     <strong><code>&lt;mark&gt;</code></strong><span> Подсвечивает текст, имеющий важное значение.</span><br><br>`,
    frequency: 4,
    language: "html",
  },
  {
    number: 4,
    title: `Какие типы полей ввода доступны через тег <input>?`,
    shortAnswer: '',
    longAnswer: `<strong><code>&lt;text&gt;</code></strong><span> Обычное текстовое поле для ввода текста.</span><br>
    <strong><code>&lt;password&gt;</code></strong> <span>Поле для ввода пароля. Текст скрыт с помощью символов (например, звездочек).</span><br>
    <strong><code>&lt;email&gt;</code></strong><span> Поле для ввода email-адреса. Браузер может проверять корректность ввода email.</span><br>
    <strong><code>&lt;number&gt;</code></strong><span> Поле для ввода чисел. Может иметь ограничения на минимальные и
    максимальные значения.</span><br>
    <strong><code>&lt;tel&gt;</code></strong> <span>Поле для ввода телефонного номера. Не проверяет формат ввода, но браузер может
    предложить клавиатуру, подходящую для ввода номера телефона.</span><br>
    <strong><code>&lt;url&gt;</code></strong> <span>Поле для ввода URL-адреса. Браузер может проверить правильность формата.</span><br>
    <strong><code>&lt;date&gt;</code></strong> <span>Поле для ввода даты. Браузер отображает календарь для выбора даты.</span><br>
    <strong><code>&lt;time&gt;</code></strong> <span>Поле для ввода времени (часы и минуты).</span><br>
    <strong><code>&lt;datetime-local&gt;</code></strong> <span>Поле для ввода даты и времени (без указания часового пояса).</span><br>
    <strong><code>&lt;month&gt;</code></strong> <span>Поле для ввода месяца и года.</span><br>
    <strong><code>&lt;week&gt;</code></strong> <span>Поле для ввода года и недели.</span><br>
    <strong><code>&lt;search&gt;</code></strong> <span>Поле для ввода поискового запроса. Это поле имеет семантическое значение для
    поиска.</span><br>
    <strong><code>&lt;file&gt;</code></strong> <span>Поле для выбора файла с устройства пользователя. Можно задать атрибуты для
    ограничения типов файлов.</span><br>
     <strong><code>&lt;checkbox&gt;</code></strong> <span>Поле для выбора одного или нескольких вариантов из предложенного списка</span><br>`,
    frequency: 4,
    language: "html",
  },
  {
    number: 5,
    title: `Как связать <label> с <input>?`,
    shortAnswer: '',
    longAnswer: `<strong>Для связывания элемента <code>&lt;label&gt;</code> с элементом <code>&lt;input&gt;</code></strong>
    
    <span>в HTML используется атрибут for в теге
    <code>&lt;label&gt;</code> и атрибут id в теге <code>&lt;input&gt;</code>. Это связывание позволяет улучшить доступность формы и облегчить
    взаимодействие с пользователем.</span>`,
    frequency: 4,
    language: "html",
    codeExample: `<form action="/submit" method="POST">
    <label for="username">Username:</label>
    <input 
      type="text" 
      id="username" 
      name="username" 
      required 
      placeholder="Введите ваше имя"
    >
  
    <label for="email">Email:</label>
    <input 
      type="email" 
      id="email" 
      name="email" 
      required 
      placeholder="Введите ваш email"
    >
  
    <input type="submit" value="Отправить">
  </form>`
  },
  {
    number: 6,
    title: `Что такое каскад в CSS?`,
    shortAnswer: '',
    longAnswer: `<strong>Каскад (Cascade) в CSS —</strong><span>это принцип, по которому браузер решает, какие стили применить к элементам,
    когда существует несколько правил, применяемых к одному элементу. Каскад предполагает, что стили
    могут поступать из разных источников и могут перекрывать друг друга в зависимости от их специфичности,
    важности и порядка объявления.</span><br>
    <strong>Основные принципы каскада:</strong><br>
    <strong>Источник стилей:</strong><span> стили могут поступать из разных мест:
    Встроенные стили (внутри тега <code>&lt;style&gt;</code> в HTML или атрибут style на элементах)
    Внешние таблицы стилей (подключенные через тег <code>&lt;link&gt;</code>)
    Браузерные стили по умолчанию (если для элемента не указаны стили, браузер применяет свои дефолтные
    стили).</span><br><strong>Специфичность:</strong><span> это правило, которое определяет, какое правило имеет больший
    «приоритет». Чем более конкретным является селектор, тем выше его специфичность. Например:
    Селектор по тегу, такой как div, имеет низкую специфичность.
    Селектор по классу, такой как .class-name, имеет более высокую специфичность.
    Селектор по идентификатору, такой как #id-name, имеет еще более высокую специфичность.
    Inline-стили (например, style="..." на элементе) имеют наивысший приоритет.</span><br>
    <strong>Порядок объявления:</strong><span> если два правила имеют одинаковую специфичность, то браузер применит последнее
    объявленное правило. То есть, если одно правило приходит позже другого, оно будет иметь больший приоритет.</span><br>
    <strong>Важность (!important):</strong><span>Атрибут !important позволяет принудительно дать стиль более высокий приоритет,
    независимо от специфичности и порядка. Использование !important делает стиль наиболее важным, но его
    нужно применять осторожно, так как он нарушает нормальный порядок каскад</span>`,
    frequency: 4,
    language: "html",
  },
  {
    number: 7,
    title: `Псевдоклассы и псевдоэлементы?`,
    shortAnswer: '',
    longAnswer: `<strong>Псевдоклассы</strong><span> позволяют применять стили к элементам в определённом состоянии, например, когда они
    находятся в фокусе, на них наведена мышь, или они являются дочерними элементами какого-либо другого
    элемента.</span><br>
    <strong>:hover</strong><span> применяется к элементу, когда на него наводится курсор.</span><br>
    <strong>:focus</strong><span> применяется к элементу, когда он получает фокус, например, после клика или навигации с клавиатуры.</span><br>
    <strong>:active</strong><span> применяется к элементу в момент его активации, обычно при клике на элемент.</span><br>
    <strong>:visited</strong><span> применяется к ссылке, которую уже посещал пользователь.</span><br>
    <strong>:checked</strong><span> применяется к элементам формы (например, checkbox или radio), которые находятся в состоянии
    "отмечено" или "выбрано".</span><br>
    <strong>:disabled</strong><span> применяется к элементам формы, которые отключены (disabled).</span><br>
    <strong>:first-child</strong><span> применяется к первому дочернему элементу родителя.</span><br>
    <strong>:last-child</strong><span> применяется к последнему дочернему элементу родителя.</span><br>
    <strong>:nth-child()</strong><span> применяется к элементу, который является n-м дочерним элементом родителя. Можно
    использовать различные выражения для выбора элементов, например, :nth-child(2), :nth-child(odd)&nbsp;, :nth-child(3n)</span><br><br>
    <strong>Псевдоэлементы</strong><span> позволяют стилизовать несуществующие или скрытые части элементов, такие как текст до
    или после элемента, или первую букву/строку текста в блоке.</span><br>
    <strong>::before</strong><span> — вставляет контент перед содержимым элемента. Обычно используется для добавления иконок или
    текста перед содержимым.</span><br>
    <strong>::after</strong><span> — вставляет контент после содержимого элемента. Применяется для добавления декоративных
    элементов или текста после основного контента.`,
    frequency: 4,
    language: "html",
  },
  {
    number: 8,
    title: `Какие существуют виды позиционирования в CSS? Чем отличаются absolute, relative, fixed и sticky?`,
    shortAnswer: '',
    longAnswer: `<strong>Виды позиционирования:</strong><span><br><br>
    <strong>Static (статическое позиционирование)</strong><span> - элемент размещается в документе в порядке потока, сверху вниз.</span><br>
    <strong>Relative (относительное позиционирование)</strong><span> - элемент остаётся в потоке документа, но можно сдвинуть его
    относительно самого себя с помощью top, right, bottom, left.</span><br>
    <strong>Absolute (абсолютное позиционирование)</strong><span> - позиционируется относительно ближайшего предка с position: relative,
    absolute, или sticky.</span><br>
    <strong>Fixed (фиксированное позиционирование)</strong><span> - элемент фиксируется относительно окна браузера. Не сдвигается
    при прокрутке страницы. Всегда остаётся на одном месте.</span><br>
    <strong>Sticky (прилипшее позиционирование)</strong><span> - элемент комбинирует свойства relative и fixed:
    Работает как relative, пока не достигает указанного значения (top, left, и т. д.).
    Затем "прилипает" и ведёт себя как fixed относительно окна.</span><br>`,
    frequency: 4,
    language: "css",
    codeExample: `.sticky-header {
    position: sticky;
    top: 0;
    background-color: orange;
    padding: 10px;
    font-size: 20px;
    font-weight: bold;
    text-align: center;
    border-bottom: 2px solid darkorange;
}`
  },
  {
    number: 9,
    title: `Как работает Flexbox и Grid?`,
    shortAnswer: '',
    longAnswer: `<strong>Flexbox (Flexible Box Layout) — </strong><span> - это технология в CSS, предназначенная для создания гибких и адаптивных
    макетов. Она позволяет удобно управлять расположением элементов внутри контейнера и их поведением
    при изменении размера контейнера. Flexbox позволяет выравнивать, распределять пространство между
    элементами и управлять их размерами в зависимости от доступного пространства.</span><br>
    <strong>Как работает Flexbox?</strong><span> Flexbox работает на основе контейнера, который становится flex-контейнером, и его дочерних элементов —
    flex-элементов. Все элементы внутри flex-контейнера могут быть расположены с использованием различных
    правил, таких как выравнивание, распределение пространства и изменение размеров.</span><br>
    <strong>Преимущества Flexbox:</strong><span><br>
    <span>Гибкость: Легко создавать адаптивные макеты.<br>
    Центрирование: Простое выравнивание элементов по горизонтали и вертикали.<br>
    Динамическое изменение: Элементы могут изменять свои размеры в зависимости от доступного пространства.</span><br>
    <strong>CSS Grid — </strong><span>это система макета в CSS, предназначенная для создания сложных двухмерных макетов (как по
    вертикали, так и по горизонтали). Она позволяет удобно и гибко управлять расположением элементов на
    странице, используя сетку с рядами и колонками. В отличие от Flexbox, который работает с элементами в одном
    направлении (либо по горизонтали, либо по вертикали), Grid позволяет работать с элементами как в строках,
    так и в колонках одновременно.</span><br>`,
    frequency: 4,
    language: "css",
    codeExample: `.container {
    display: flex; 
    justify-content: space-between; /* Равномерно распределяем карточки */
    align-items: center; /* Выравнивание по центру */
    flex-wrap: wrap; /* Перенос элементов на новую строку, если не помещаются */
    gap: 20px; /* Расстояние между карточками */
    padding: 20px;
}
`
  },
  {
    number: 10,
    title: `Что такое медиа-запросы?`,
    shortAnswer: '',
    longAnswer: `<strong>Медиа-запросы (или media queries) — </strong><span> это важный инструмент в CSS, который позволяет применять
    различные стили в зависимости от характеристик устройства или окна браузера, таких как его ширина, высота,
    разрешение экрана, ориентация и другие параметры. Они играют ключевую роль в создании адаптивной
    верстки (responsive design), позволяя веб-страницам автоматически адаптироваться под различные экраны и
    устройства (от смартфонов до десктопов).</span><br>
    <strong>Применение медиа-запросов для адаптивной верстки</strong><br>
    <span>Адаптивная верстка позволяет страницам изменять свой дизайн в зависимости от размеров экрана устройства.
    С помощью медиа-запросов можно:
    Менять структуру и размеры элементов. Например, изменить количество колонок в сетке, уменьшить размеры
    текста на мобильных устройствах или скрыть ненужные элементы.
    Реализовывать мобильные версии. Например, на мобильных устройствах можно скрывать боковые панели
    или изменить навигацию для лучшего пользовательского опыта.
    Создавать мультимедийные страницы. Медиа-запросы позволяют адаптировать контент под разные виды
    устройств (например, планшеты и смартфоны).<span><br>`,
    frequency: 4,
    language: "css",
    codeExample: `@media (max-width: 768px) {
    .container {
        flex-direction: column; /* Карточки будут в колонку */
        align-items: center;
    }

    .card {
        max-width: 100%; /* Карточки займут всю ширину контейнера */
    }
}
`
  },
  {
    number: 11,
    title: `Чем отличается inline, block, и inline-block?`,
    shortAnswer: '',
    longAnswer: `<strong>Inline (Строчные элементы)</strong><br><br>
    <span>• Занимает только столько места, сколько необходимо содержимому.<br>
    • Нельзя задавать width и height, они игнорируются.<br>
    • На одной строке может находиться несколько inline-элементов.<br>
    <strong>Пример:</strong> <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code><br><br>
    <strong>Block (Блочные элементы)</strong><br><br>
    <span>• Занимает всю ширину родительского контейнера.<br>
    • Начинается с новой строки.<br>
    • Можно задавать width, height, margin, padding.<br>
    <strong>Пример:</strong> <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;ul&gt;</code>, <code>&lt;section&gt;</code><br><br>
    <strong>Inline-block (Комбинированный)</strong><br><br>
    <span>• Ведёт себя как inline (не переносится на новую строку).<br>
    • Позволяет задавать width, height, margin, padding (в отличие от inline).<br>
    • Используется для создания гибких элементов (например, кнопки, меню, карточки).<br>`,
    frequency: 4,
    language: "css",
  },
];
